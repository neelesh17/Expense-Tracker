[{"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/styles.js":"1","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/App.js":"2","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/List/list.jsx":"3","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/Form/form.jsx":"4","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Snackbar/snackbar.jsx":"5","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/main.jsx":"6","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/utils/formatDate.js":"7","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/styles.js":"8","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/List/styles.js":"9","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/index.js":"10"},{"size":489,"mtime":1608623075225,"results":"11","hashOfConfig":"12"},{"size":1490,"mtime":1608708980302,"results":"13","hashOfConfig":"12"},{"size":1659,"mtime":1608651880797,"results":"14","hashOfConfig":"12"},{"size":5283,"mtime":1608705754369,"results":"15","hashOfConfig":"12"},{"size":888,"mtime":1608705837925,"results":"16","hashOfConfig":"12"},{"size":1290,"mtime":1608708606334,"results":"17","hashOfConfig":"12"},{"size":337,"mtime":1608651880801,"results":"18","hashOfConfig":"12"},{"size":552,"mtime":1608708707283,"results":"19","hashOfConfig":"12"},{"size":398,"mtime":1608651880797,"results":"20","hashOfConfig":"12"},{"size":414,"mtime":1608708971674,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"qcbkh7",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/styles.js",[],["45","46"],"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/App.js",[],"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/List/list.jsx",[],"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/Form/form.jsx",["47"],"import React, {useState, useEffect, useContext} from 'react'\nimport { TextField, Typography, Grid, FormControl, InputLabel, Button, Select, MenuItem} from \"@material-ui/core\";\nimport useStyles from './styles';\nimport {ExpenseTrackerContext} from '../../../context/context';\nimport { useSpeechContext } from '@speechly/react-client';\nimport { v4 as uuidv4 } from 'uuid';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport formatDate from '../../../utils/formatDate';\nimport CustomizedSnackbar from '../../Snackbar/snackbar';\n\nconst initialState = {\n    amount: '',\n    category: '',\n    type: 'Income',\n    date: formatDate(new Date()),\n}\nconst Form = () => {\n    const classes = useStyles();\n    const [formData, setFormData] = useState(initialState); \n    const [open, setOpen] = useState(false);\n    const handleChange = (e) => {\n        e.preventDefault();\n        const {name, value} = e.target;\n        if([name] === \"date\")\n            setFormData({...formData, [name]: formatDate(value)})\n        else\n            setFormData({...formData, [name]: value})\n    }\n    const {addTransaction} = useContext(ExpenseTrackerContext);\n    const {segment} = useSpeechContext();\n    const createTransaction = () => {\n        if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n        const transaction = {\n            ...formData, \n            amount: Number(formData.amount),\n            id: uuidv4()\n        }\n        setOpen(true);\n        addTransaction(transaction);\n        setFormData(initialState);\n    }\n\n    useEffect(() => {\n        if(segment){\n            if(segment.intent.intent === 'add_expense') {\n                setFormData({...formData, type: 'Expense'});\n            } else if(segment.intent.intent === 'add_income'){\n                setFormData({...formData, type: 'Income'});\n            } else if(segment.isFinal && segment.intent.intent === \"create_transaction\"){\n                return createTransaction();\n            } else if(segment.isFinal && segment.intent.intent === \"cancel_transaction\"){\n                setFormData(initialState);\n            }\n\n            segment.entities.forEach((e) => {\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\n                switch(e.type){\n                    case 'amount': \n                        setFormData({...formData, amount: e.value});\n                        break;\n                    case 'category': \n                        if(incomeCategories.map((ic) => ic.type).includes(category)){\n                            setFormData({...formData, type: 'Income', category});\n                        }else if(expenseCategories.map((ec) => ec.type).includes(category)){\n                            setFormData({...formData, type: 'Expense', category});\n                        }        \n                        break;\n                    case 'date': \n                        setFormData({...formData, date: e.value});\n                        break;\n                    default : break;\n                }\n            });\n\n            if(segment.isFinal && formData.amount && formData.category && formData.type && formData.date){\n                createTransaction();\n            }\n        }\n    }, [segment]);\n\n    const selectedCategories = formData.type === \"Income\" ? incomeCategories : expenseCategories;\n    return (\n        <Grid container spacing={2}>\n            <CustomizedSnackbar open={open} setOpen={setOpen}/>\n            <Grid item xs={12}>\n                <Typography align=\"center\" varient=\"subtitle2\" gutterBottom>\n                    {\n                        segment && segment.words.map((w) => w.value).join(\" \")\n                    } \n                </Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Type</InputLabel>\n                    <Select name=\"type\" value={formData.type} onChange={handleChange}>\n                        <MenuItem value=\"Income\">Income</MenuItem>\n                        <MenuItem value=\"Expense\">Expense</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Select name=\"category\" value={formData.category} onChange={handleChange}>\n                        {\n                            selectedCategories.map((c) => (\n                                <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>\n                            ))\n                        }\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField name=\"amount\" value={formData.amount} type=\"number\" label=\"Amount\" fullWidth onChange={handleChange}/>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField name=\"date\" value={formData.date} type=\"date\" label=\"Date\" fullWidth onChange={handleChange} />\n            </Grid>\n            <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\n        </Grid>\n    )\n}\n\nexport default Form;\n","/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Snackbar/snackbar.jsx",[],"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/main.jsx",[],["48","49"],"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/utils/formatDate.js",[],"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/styles.js",[],"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/components/Main/List/styles.js",[],"/home/neelesh/My Space/Coding/web-dev/expense_tracker/src/index.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":79,"column":8,"nodeType":"56","endLine":79,"endColumn":17,"suggestions":"57"},{"ruleId":"50","replacedBy":"58"},{"ruleId":"52","replacedBy":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["62"],["60"],["61"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"65","text":"66"},[3279,3288],"[createTransaction, formData, segment]"]